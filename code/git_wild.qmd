---
title: "Wild Git Collaboration Practice"
format: 
  html:
    code-fold: show
execute: 
  warning: false
  message: false
---


## STEP 5: No merge conflicts!

```{r partner 1}
### In this code chunk, start with the diamonds dataset (built in to
### ggplot2 package) and create a plot of price vs. carat (or some other
### variables of your choice)

#load the necessary libraries
library(ggplot2)

#define the diamonds data from the ggplot2 package
diamonds <- diamonds

#create a plot to visualize price vs. carat
price_carat_plot <- ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point(aes(x = carat, y = price, color = cut)) +
  geom_smooth()

#view the plot
price_carat_plot

```

```{r partner 2}
### In this code chunk, start with the diamonds dataset (built in to
### ggplot2 package) and create a subset based on filtering, e.g., 
### size greater than 1 carat or cut is "Ideal"


library(ggplot2)
data(diamonds)
ideal_diamonds <- subset(diamonds, cut == "Ideal")
ideal_diamonds

```

## STEP 7: Uh oh, merge conflicts!

```{r break-it-1}
### Both partners - delete this comment, then write some code here
### to plot, summarize, calculate something simple using the diamonds
### dataset.

#load the necessary libraries
library(ggplot2)
library(dplyr)


#create a summary of the price by carat for each cut
diamonds_summary <- diamonds %>% 
  group_by(cut) %>% 
  summarise(carat_m = mean(carat),
            price_m = mean(price))

#create a ggplot
carat_price_new <- ggplot(diamonds_summary, aes(x = carat_m, y = price_m)) +
  geom_point(aes(x = carat_m, y = price_m, color = cut)) 

carat_price_new

```

## STEP 11: And even more merge conflicts!

```{r break-it-2}
### Both partners - delete this comment, then write some code here
### to plot, summarize, calculate something simple using the diamonds
### dataset.


```

